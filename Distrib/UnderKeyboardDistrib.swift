//
// An iOS libary for moving content from under the keyboard.
//
// https://github.com/exchangegroup/UnderKeyboard
//
// This file was automatically generated by combining multiple Swift source files.
//


// ----------------------------
//
// UnderKeyboardLayoutConstraint.swift
//
// ----------------------------

import UIKit

@objc
/**

Adjusts the length (constant value) of the bottom layout constraint when keyboard shows and hides.

*/
public class UnderKeyboardLayoutConstraint {
  private weak var bottomLayoutConstraint: NSLayoutConstraint?
  private weak var bottomLayoutGuide: UILayoutSupport?
  private var keyboardObserver = UnderKeyboardObserver()
  private var initialConstraintConstant: CGFloat = 0
  private var minMargin: CGFloat = 10
  
  private var viewToAnimate: UIView?
  
  public init() {
    keyboardObserver.willAnimateKeyboard = keyboardWillAnimate
    keyboardObserver.animateKeyboard = animateKeyboard
    keyboardObserver.start()
  }
  
  deinit {
    stop()
  }
  
  /// Stop listening for keyboard notifications.
  public func stop() {
    keyboardObserver.stop()
  }
  
  /**
  
  - parameter constraint: Supply a bottom layout constraint. Its constant value will be adjusted when keyboard is shown and hidden.
  - parameter view: Supply a view that will be used to animate the constraint. It is usually the superview containing the view with the constraint.
  - parameter minMargin: Specify the minimum margin between the keyboard and the bottom of the view the constraint is attached to. Default: 10.
  - parameter buttonLayoutGuide: Supply an optional bottom layout guide (like a tab bar) that will be taken into account during height calculations.
  
  */
  public func setup(bottomLayoutConstraint: NSLayoutConstraint,
    view: UIView, minMargin: CGFloat = 10,
    bottomLayoutGuide: UILayoutSupport? = nil) {
      
    initialConstraintConstant = bottomLayoutConstraint.constant
    self.bottomLayoutConstraint = bottomLayoutConstraint
    self.minMargin = minMargin
    self.bottomLayoutGuide = bottomLayoutGuide
    self.viewToAnimate = view
      
    // Keyboard is already open when setup is called
    if let currentKeyboardHeight = keyboardObserver.currentKeyboardHeight
      where currentKeyboardHeight > 0 {
        
      keyboardWillAnimate(true, height: currentKeyboardHeight)
    }
  }
  
  func keyboardWillAnimate(isShowing: Bool, height: CGFloat) {
    guard let bottomLayoutConstraint = bottomLayoutConstraint else { return }
    
    let layoutGuideHeight = bottomLayoutGuide?.length ?? 0
    let correctedHeight = height - layoutGuideHeight
    
    if isShowing {
      let newConstantValue = correctedHeight + minMargin
      if newConstantValue > bottomLayoutConstraint.constant {
        bottomLayoutConstraint.constant = newConstantValue
      }
    } else {
      bottomLayoutConstraint.constant = initialConstraintConstant
    }
  }
  
  func animateKeyboard(isShowing: Bool, height: CGFloat) {
    viewToAnimate?.layoutIfNeeded()
  }
}


// ----------------------------
//
// UnderKeyboardObserver.swift
//
// ----------------------------

import UIKit

/**

Detects appearance of software keyboard and calls the supplied closures that can be used for changing the layout and animation.

*/
public final class UnderKeyboardObserver: NSObject {
  public typealias AnimationCallback = (isShowing: Bool, height: CGFloat) -> ()
  
  let notificationCenter: NSNotificationCenter
  
  /// Function that will be called before the keyboad is shown and before animation is started.
  public var willAnimateKeyboard: AnimationCallback?
  
  /// Function that will be called inside the animation block. This can be used to call `layoutIfNeeded` on the view.
  public var animateKeyboard: AnimationCallback?
  
  /// Current height of the keyboard. Has value `nil` if unknown.
  public var currentKeyboardHeight: CGFloat?
  
  public override init() {
    notificationCenter = NSNotificationCenter.defaultCenter()
    super.init()
  }
  
  deinit {
    stop()
  }
  
  /// Start listening for keyboard notifications.
  public func start() {
    stop()
    
    notificationCenter.addObserver(self, selector: Selector("keyboardNotification:"), name:UIKeyboardWillShowNotification, object: nil);
    notificationCenter.addObserver(self, selector: Selector("keyboardNotification:"), name:UIKeyboardWillHideNotification, object: nil);
  }
  
  /// Stop listening for keyboard notifications.
  public func stop() {
    notificationCenter.removeObserver(self)
  }
  
  // MARK: - Notification
  
  func keyboardNotification(notification: NSNotification) {
    let isShowing = notification.name == UIKeyboardWillShowNotification
    
    if let userInfo = notification.userInfo,
      let height = (userInfo[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.CGRectValue().height,
      let duration: NSTimeInterval = (userInfo[UIKeyboardAnimationDurationUserInfoKey] as? NSNumber)?.doubleValue,
      let animationCurveRawNSN = userInfo[UIKeyboardAnimationCurveUserInfoKey] as? NSNumber {
        
      willAnimateKeyboard?(isShowing: isShowing, height: height)
        
      UIView.animateWithDuration(duration,
        delay: NSTimeInterval(0),
        options: UIViewAnimationOptions(rawValue: animationCurveRawNSN.unsignedLongValue),
        animations: { [weak self] in
          self?.animateKeyboard?(isShowing: isShowing, height: height)
        },
        completion: nil
      )
        
      currentKeyboardHeight = height
    }
  }
}


// ----------------------------
//
// UnderKeyboardScrollView.swift
//
// ----------------------------

import UIKit

@objc
/**

Moves scroll view content from under the keyboard on iOS. It adjusts the bottom inset of the scroll view by the height of the keyboard when it is shown.

*/
public class UnderKeyboardScrollView {
  private weak var scrollView: UIScrollView?
  private weak var bottomLayoutGuide: UILayoutSupport?
  private let keyboardObserver = UnderKeyboardObserver()
  
  public init() {
    keyboardObserver.willAnimateKeyboard = keyboardWillAnimate
    keyboardObserver.start()
  }
  
  deinit {
    stop()
  }
  
  
  /// Stop listening for keyboard notifications.
  public func stop() {
    keyboardObserver.stop()
  }
  
  /**
  
  - parameter scrollView: Supply a scroll view or any of its subclasses. Its bottom inset will be adjusted to the height of the keyboard when it is shown.
  
  - parameter buttonLayoutGuide: Supply an optional bottom layout guide (like a tab bar) that will be used for adjusting  the scroll view insets.
  
  */
  public func setup(scrollView: UIScrollView, bottomLayoutGuide: UILayoutSupport? = nil) {
    self.scrollView = scrollView
    self.bottomLayoutGuide = bottomLayoutGuide
  }
  
  func keyboardWillAnimate(isShowing: Bool, height: CGFloat) {
    if isShowing {
      let layoutGuideHeight = bottomLayoutGuide?.length ?? 0
      let height = height - layoutGuideHeight

      let insets =  UIEdgeInsets(
        top: 0,
        left: 0,
        bottom: height,
        right: 0)

      scrollView?.contentInset = insets
      scrollView?.scrollIndicatorInsets = insets
    } else {
      scrollView?.contentInset = UIEdgeInsetsZero;
      scrollView?.scrollIndicatorInsets = UIEdgeInsetsZero;
    }
  }
}


